{"version":3,"file":"index.js","sources":["../src/lib/errors/DeserializerError.ts","../src/lib/util/constants.ts","../src/lib/util/util.ts","../src/lib/Deserializer.ts","../src/lib/errors/SerializerError.ts","../src/lib/Serializer.ts","../src/index.ts"],"sourcesContent":["export class DeserializerError extends Error {\n\tpublic kind: DeserializerReason;\n\n\tpublic constructor(message: string, kind: DeserializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum DeserializerReason {\n\tUnknownType = 'UnknownType',\n\tUnexpectedEndOfBuffer = 'UnexpectedEndOfBuffer'\n}\n","export enum BinaryTokens {\n\tNullPointer,\n\tHole,\n\tNull,\n\tPBigInt,\n\tNBigInt,\n\tBoolean,\n\tString,\n\tUndefined,\n\tUnsignedByte,\n\tSignedByte,\n\tUnsignedInt32,\n\tSignedInt32,\n\tUnsignedFloat64,\n\tSignedFloat64,\n\tArray,\n\tEmptyArray,\n\tObjectReference,\n\tDate,\n\tBooleanObject,\n\tNumberObject,\n\tStringObject,\n\tEmptyObject,\n\tObject,\n\tRegExp,\n\tMap,\n\tEmptyMap,\n\tWeakMap,\n\tSet,\n\tEmptySet,\n\tWeakSet,\n\tArrayBuffer,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tInt16Array,\n\tUint16Array,\n\tInt32Array,\n\tUint32Array,\n\tFloat32Array,\n\tFloat64Array,\n\tDataView\n}\n\nexport enum BinaryPrimitives {\n\tBigInt = 'bigint',\n\tBoolean = 'boolean',\n\tNumber = 'number',\n\tObject = 'object',\n\tString = 'string',\n\tUndefined = 'undefined'\n}\n\nexport type TypedArray = Uint8Array | Float32Array | Int32Array;\nexport const TypedArray = Object.getPrototypeOf(Int8Array) as TypedArray;\n","import { BinaryTokens, TypedArray } from './constants';\n\nexport namespace RegExps {\n\tconst g = 1 << 0;\n\tconst i = 1 << 1;\n\tconst m = 1 << 2;\n\tconst y = 1 << 3;\n\tconst u = 1 << 4;\n\tconst s = 1 << 5;\n\n\texport function flagsAsInteger(regExp: RegExp) {\n\t\treturn (\n\t\t\t(regExp.global ? g : 0) |\n\t\t\t(regExp.ignoreCase ? i : 0) |\n\t\t\t(regExp.multiline ? m : 0) |\n\t\t\t(regExp.sticky ? y : 0) |\n\t\t\t(regExp.unicode ? u : 0) |\n\t\t\t(regExp.dotAll ? s : 0)\n\t\t);\n\t}\n\n\texport function flagsFromInteger(integer: number) {\n\t\tlet ret = '';\n\t\tif (integer & g) ret += 'g';\n\t\tif (integer & i) ret += 'i';\n\t\tif (integer & m) ret += 'm';\n\t\tif (integer & y) ret += 'y';\n\t\tif (integer & u) ret += 'u';\n\t\tif (integer & s) ret += 's';\n\t\treturn ret;\n\t}\n}\n\nexport namespace BigIntegers {\n\texport const SUPPORTED = typeof BigInt === 'function';\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\texport const ZERO = SUPPORTED ? BigInt(0) : null;\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\texport const ONE = SUPPORTED ? BigInt(1) : null;\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\texport const EIGHT = SUPPORTED ? BigInt(8) : null;\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\texport const BYTE = SUPPORTED ? BigInt(0xff) : null;\n}\n\nexport namespace Numbers {\n\texport function nextPowerOfTwo(n: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log2(n)));\n\t}\n}\n\nexport namespace TypedArrays {\n\texport const constructors = [\n\t\tInt8Array,\n\t\tUint8Array,\n\t\tUint8ClampedArray,\n\t\tInt16Array,\n\t\tUint16Array,\n\t\tInt32Array,\n\t\tUint32Array,\n\t\tFloat32Array,\n\t\tFloat64Array,\n\t\tDataView\n\t] as { new <T extends TypedArray>(...args: any): T }[];\n\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\tif (typeof BigInt64Array === 'function') constructors.push(BigInt64Array);\n\t/* istanbul ignore next: This is environment-specific, unused when unsupported */\n\tif (typeof BigUint64Array === 'function') constructors.push(BigUint64Array);\n\n\texport const typedArrayTags = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t[Object.prototype.toString.call(new typedArray(new ArrayBuffer(0))), BinaryTokens[typedArray.name]] as [string, BinaryTokens]\n\t\t)\n\t);\n\n\texport const typedArrayTagToConstructor = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t([BinaryTokens[typedArray.name], typedArray] as unknown) as [BinaryTokens, { new <T extends TypedArray>(...args: any): T }]\n\t\t)\n\t);\n}\n","import { DeserializerError, DeserializerReason } from './errors/DeserializerError';\nimport { BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, RegExps, TypedArrays } from './util/util';\n\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport class Deserializer {\n\tpublic offset = 0;\n\tprivate _buffer: Uint8Array | null;\n\tprivate _objectIDs = new Map() as Map<number, Record<any, any>>;\n\n\tpublic constructor(buffer: Uint8Array) {\n\t\tthis._buffer = buffer;\n\t}\n\n\tprivate get finished() {\n\t\treturn this.offset === this._buffer!.length;\n\t}\n\n\tpublic clean() {\n\t\tthis._buffer = null;\n\t\tthis.offset = 0;\n\t\tthis._objectIDs.clear();\n\t}\n\n\tpublic read() {\n\t\tconst type = this.read8();\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.Null:\n\t\t\t\treturn null;\n\t\t\tcase BinaryTokens.PBigInt:\n\t\t\t\treturn this.readValueBigInt(false);\n\t\t\tcase BinaryTokens.NBigInt:\n\t\t\t\treturn this.readValueBigInt(true);\n\t\t\tcase BinaryTokens.Boolean:\n\t\t\t\treturn Boolean(this.read8());\n\t\t\tcase BinaryTokens.String:\n\t\t\t\treturn this.readString();\n\t\t\tcase BinaryTokens.Undefined:\n\t\t\t\treturn undefined;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\treturn this.read8();\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\treturn -this.read8();\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\treturn this.read32();\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\treturn -this.read32();\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\treturn this.readF64();\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\treturn -this.readF64();\n\t\t\tcase BinaryTokens.Array:\n\t\t\t\treturn this.readValueArray();\n\t\t\tcase BinaryTokens.EmptyArray:\n\t\t\t\treturn this.createObjectID([]);\n\t\t\tcase BinaryTokens.ObjectReference:\n\t\t\t\treturn this._objectIDs.get(this.read32());\n\t\t\tcase BinaryTokens.Date:\n\t\t\t\treturn this.createObjectID(new Date(this.readF64()));\n\t\t\tcase BinaryTokens.BooleanObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Boolean(this.read8()));\n\t\t\tcase BinaryTokens.NumberObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Number(this.readF64()));\n\t\t\tcase BinaryTokens.StringObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new String(this.readString()));\n\t\t\tcase BinaryTokens.EmptyObject:\n\t\t\t\treturn this.createObjectID({});\n\t\t\tcase BinaryTokens.Object:\n\t\t\t\treturn this.readValueObject();\n\t\t\tcase BinaryTokens.RegExp:\n\t\t\t\treturn this.createObjectID(new RegExp(this.readString(), RegExps.flagsFromInteger(this.read8())));\n\t\t\tcase BinaryTokens.Map:\n\t\t\t\treturn this.readValueMap();\n\t\t\tcase BinaryTokens.EmptyMap:\n\t\t\t\treturn this.createObjectID(new Map());\n\t\t\tcase BinaryTokens.Set:\n\t\t\t\treturn this.readValueSet();\n\t\t\tcase BinaryTokens.EmptySet:\n\t\t\t\treturn this.createObjectID(new Set());\n\t\t\tcase BinaryTokens.ArrayBuffer:\n\t\t\t\treturn this.readValueArrayBuffer();\n\t\t\tcase BinaryTokens.WeakMap:\n\t\t\t\treturn this.createObjectID(new WeakMap());\n\t\t\tcase BinaryTokens.WeakSet:\n\t\t\t\treturn this.createObjectID(new WeakSet());\n\t\t\tcase BinaryTokens.Int8Array:\n\t\t\tcase BinaryTokens.Uint8Array:\n\t\t\tcase BinaryTokens.Uint8ClampedArray:\n\t\t\tcase BinaryTokens.Int16Array:\n\t\t\tcase BinaryTokens.Uint16Array:\n\t\t\tcase BinaryTokens.Int32Array:\n\t\t\tcase BinaryTokens.Uint32Array:\n\t\t\tcase BinaryTokens.Float32Array:\n\t\t\tcase BinaryTokens.Float64Array:\n\t\t\tcase BinaryTokens.DataView:\n\t\t\t\treturn this.readValueTypedArray(type);\n\t\t\tdefault:\n\t\t\t\tthrow new DeserializerError(`Unknown type received: ${type}`, DeserializerReason.UnknownType);\n\t\t}\n\t}\n\n\tprivate readValueTypedArray(token: BinaryTokens) {\n\t\t// Read the byte length, then create a shared ArrayBuffer for the desired\n\t\t// typedArray and an Uint8Array which we write to.\n\t\tconst byteLength = this.read32();\n\t\tthis.ensureBytes(byteLength);\n\n\t\t// eslint-disable-next-line @typescript-eslint/init-declarations\n\t\tlet value: TypedArray;\n\t\t// Fast-path if we are deserializing an Uint8Array\n\t\tif (token === BinaryTokens.Uint8Array) {\n\t\t\tvalue = this._buffer!.subarray(this.offset, this.offset + byteLength);\n\t\t} else {\n\t\t\tconst buffer = new ArrayBuffer(byteLength);\n\t\t\tconst ctor = TypedArrays.typedArrayTagToConstructor.get(token)!;\n\t\t\tvalue = new ctor(buffer);\n\t\t\tnew Uint8Array(buffer).set(this._buffer!.subarray(this.offset, this.offset + byteLength));\n\t\t}\n\t\tthis.offset += byteLength;\n\t\treturn this.createObjectID(value);\n\t}\n\n\tprivate readValueArrayBuffer() {\n\t\tconst value = this.createObjectID(new ArrayBuffer(this.read32()));\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tfor (let i = 0, max = uint8Array.length; i < max; i++) {\n\t\t\tuint8Array[i] = this.read8();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate readValueSet() {\n\t\tconst value = this.createObjectID(new Set());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.add(this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueMap() {\n\t\tconst value = this.createObjectID(new Map());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.set(this.read(), this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueObject() {\n\t\tconst value = this.createObjectID({}) as Record<string | number, unknown>;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tconst entryKey = this.read() as string | number;\n\t\t\tconst entryValue = this.read();\n\t\t\tvalue[entryKey] = entryValue;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueArray() {\n\t\tconst value = this.createObjectID([] as unknown[]);\n\t\tlet i = 0;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tif (this.read8() !== BinaryTokens.Hole) {\n\t\t\t\tthis.offsetBack();\n\t\t\t\tvalue[i] = this.read();\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\n\t\t// This is required for holey arrays\n\t\tvalue.length = i;\n\n\t\treturn value;\n\t}\n\n\tprivate readString() {\n\t\tconst end = this._buffer!.indexOf(BinaryTokens.NullPointer, this.offset);\n\t\tif (end === -1) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\tconst sub = this._buffer!.subarray(this.offset, end);\n\t\tconst str = Deserializer._textDecoder.decode(sub);\n\t\tthis.offset = end + 1;\n\t\treturn str;\n\t}\n\n\tprivate readValueBigInt(sign: boolean) {\n\t\tconst byteLength = this.read32();\n\n\t\tlet value = BigIntegers.ZERO!;\n\t\tlet b = BigIntegers.ONE!;\n\n\t\tfor (let i = 0; i < byteLength; i++) {\n\t\t\tconst digit = this.read8();\n\t\t\tvalue += BigInt(digit) * b;\n\t\t\tb <<= BigIntegers.EIGHT!;\n\t\t}\n\n\t\treturn sign ? -value : value;\n\t}\n\n\tprivate readNullTerminator() {\n\t\tif (this.watch8() === BinaryTokens.NullPointer) {\n\t\t\t++this.offset;\n\t\t\treturn true;\n\t\t} else if (this.finished) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate createObjectID<T>(value: T) {\n\t\tthis._objectIDs.set(this._objectIDs.size, value);\n\t\treturn value;\n\t}\n\n\tprivate offsetBack() {\n\t\t--this.offset;\n\t}\n\n\tprivate watch8() {\n\t\treturn this._buffer![this.offset];\n\t}\n\n\tprivate read8() {\n\t\tthis.ensureBytes(1);\n\t\treturn this._buffer![this.offset++];\n\t}\n\n\tprivate read32() {\n\t\tthis.ensureBytes(4);\n\t\treturn (\n\t\t\tthis._buffer![this.offset++] * 2 ** 24 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 16 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 8 +\n\t\t\tthis._buffer![this.offset++]\n\t\t);\n\t}\n\n\tprivate readF64() {\n\t\tthis.ensureBytes(8);\n\t\tuInt8Float64Array[0] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[1] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[2] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[3] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[4] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[5] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[6] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[7] = this._buffer![this.offset++];\n\t\treturn float64Array[0];\n\t}\n\n\tprivate ensureBytes(amount: number) {\n\t\tif (this.offset + amount > this._buffer!.length) {\n\t\t\tthrow new DeserializerError(`Found End-Of-Buffer, expecting ${amount} byte(s).`, DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t}\n\n\tprivate static _textDecoder = new TextDecoder();\n}\n","export class SerializerError extends Error {\n\tpublic kind: SerializerReason;\n\n\tpublic constructor(message: string, kind: SerializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum SerializerReason {\n\tUnsupportedType = 'UnsupportedType',\n\tUnsupportedSerializedType = 'UnsupportedSerializedType',\n\tUnexpectedNullValue = 'UnexpectedNullValue'\n}\n","import { SerializerError, SerializerReason } from './errors/SerializerError';\nimport { BinaryPrimitives, BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, Numbers, RegExps, TypedArrays } from './util/util';\n\n// Immutable\nconst MIN_INT8 = -0b0111_1111;\nconst MAX_INT8 = 0b1111_1111;\nconst MIN_INT32 = -0b0111_1111_1111_1111_1111_1111_1111_1111;\nconst MAX_INT32 = 0b1111_1111_1111_1111_1111_1111_1111_1111;\n\n// Mutable\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport interface OnUnsupported {\n\t(value: unknown): unknown;\n}\n\nexport class Serializer {\n\tpublic onUnsupported: OnUnsupported | null;\n\tprivate _buffer: Uint8Array | null = new Uint8Array(16);\n\tprivate _offset = 0;\n\tprivate _objectIDs = new Map() as Map<Record<any, any>, number>;\n\tprivate _data: any;\n\tprivate _handlingUnsupported = false;\n\n\tpublic constructor(data: any, onUnsupported: OnUnsupported | null = null) {\n\t\tthis._data = data;\n\t\tthis.onUnsupported = onUnsupported;\n\t}\n\n\tpublic process() {\n\t\tthis.parse(this._data);\n\t\tconst temp = this._buffer!.subarray(0, this._offset);\n\n\t\tthis._data = null;\n\t\tthis._offset = 0;\n\t\tthis._objectIDs.clear();\n\t\tthis._buffer = null;\n\t\treturn temp;\n\t}\n\n\tpublic parse(value: any, hint = typeof value) {\n\t\tswitch (hint) {\n\t\t\tcase BinaryPrimitives.BigInt:\n\t\t\t\treturn this.parseBigInt(value);\n\t\t\tcase BinaryPrimitives.Boolean:\n\t\t\t\treturn this.parseBoolean(value);\n\t\t\tcase BinaryPrimitives.Number:\n\t\t\t\treturn this.parseNumber(value);\n\t\t\tcase BinaryPrimitives.Object:\n\t\t\t\treturn this.parseObject(value);\n\t\t\tcase BinaryPrimitives.String:\n\t\t\t\treturn this.parseString(value);\n\t\t\tcase BinaryPrimitives.Undefined:\n\t\t\t\treturn this.parseUndefined();\n\t\t\tdefault:\n\t\t\t\treturn this.handleUnsupported(value, hint);\n\t\t}\n\t}\n\n\tprotected handleUnsupported(value: unknown, hint: string) {\n\t\t// If there's an onUnsupported handler, try to call it\n\t\tif (this.onUnsupported) {\n\t\t\t// If the serializer was handling an unsupported type, abort the serialization\n\t\t\t// as it's most likely an error in the return type of the handler.\n\t\t\tif (this._handlingUnsupported) {\n\t\t\t\tthrow new SerializerError('The modified value was not serializable.', SerializerReason.UnsupportedSerializedType);\n\t\t\t}\n\n\t\t\t// Set the serializer to handling unsupported, parse, and once it's done\n\t\t\t// serializing the output of unSupported, set it back to false.\n\t\t\tthis._handlingUnsupported = true;\n\t\t\tthis.parse(this.onUnsupported(value));\n\t\t\tthis._handlingUnsupported = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// If no handler is available, throw TypeError\n\t\tthrow new SerializerError(`Unsupported type '${hint}'.`, SerializerReason.UnsupportedType);\n\t}\n\n\tprivate parseBigInt(value: bigint) {\n\t\tconst sign = value >= BigIntegers.ZERO! ? 0 : 1;\n\t\tthis.ensureAlloc(5);\n\t\tthis.write8(sign ? BinaryTokens.NBigInt : BinaryTokens.PBigInt);\n\n\t\tconst headerOffset = this._offset;\n\t\tthis._offset += 4;\n\n\t\tlet unsignedBigInt = sign === 1 ? -value : value;\n\t\tlet byteCount = 0;\n\t\twhile (unsignedBigInt > 0) {\n\t\t\t++byteCount;\n\t\t\tthis.write8(Number(unsignedBigInt & BigIntegers.BYTE!));\n\t\t\tunsignedBigInt >>= BigIntegers.EIGHT!;\n\t\t}\n\n\t\tthis.write32At(byteCount, headerOffset);\n\t}\n\n\tprivate parseBoolean(value: boolean) {\n\t\tthis.write8(BinaryTokens.Boolean);\n\t\tthis.write8(value ? 1 : 0);\n\t}\n\n\tprivate parseNumber(value: number) {\n\t\tconst type = this.getNumberType(value);\n\t\tthis.write8(type);\n\t\t/* istanbul ignore next: This prints an erroneous coverage result. Definitely must be checked in the future. */\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\tthis.write8(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\tthis.write8(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\tthis.write32(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\tthis.write32(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\tthis.writeF64(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\tthis.writeF64(value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthrow new Error(`Unreachable code. Got unexpected integer type ${type}`);\n\t\t}\n\t}\n\n\tprivate parseObject(value: object) {\n\t\tif (value === null) return this.parseValueNull();\n\n\t\t// Circular reference detection\n\t\tconst id = this._objectIDs.get(value);\n\t\tif (typeof id === 'number') return this.parseValueReference(id);\n\n\t\t// Set this object to the reference list\n\t\tthis._objectIDs.set(value, this._objectIDs.size);\n\n\t\t// If it's an array, parse it\n\t\tif (Array.isArray(value)) return this.parseValueArray(value);\n\n\t\t// We're doing this because it's safer for the context where you\n\t\t// extend the classes.\n\t\tconst tag = Object.prototype.toString.call(value);\n\t\t/* istanbul ignore next: This prints an erroneous coverage result. Definitely must be checked in the future. */\n\t\tswitch (tag) {\n\t\t\tcase '[object String]':\n\t\t\t\treturn this.parseValueObjectString((value as unknown) as string);\n\t\t\tcase '[object Boolean]':\n\t\t\t\treturn this.parseValueObjectBoolean((value as unknown) as boolean);\n\t\t\tcase '[object Number]':\n\t\t\t\treturn this.parseValueObjectNumber((value as unknown) as number);\n\t\t\tcase '[object Date]':\n\t\t\t\treturn this.parseValueObjectDate(value as Date);\n\t\t\tcase '[object RegExp]':\n\t\t\t\treturn this.parseValueObjectRegExp(value as RegExp);\n\t\t\tcase '[object Object]':\n\t\t\t\treturn this.parseValueObjectLiteral(value);\n\t\t\tcase '[object Map]':\n\t\t\t\treturn this.parseValueObjectMap(value as Map<unknown, unknown>);\n\t\t\tcase '[object Set]':\n\t\t\t\treturn this.parseValueObjectSet(value as Set<unknown>);\n\t\t\tcase '[object ArrayBuffer]':\n\t\t\t\treturn this.parseValueObjectArrayBuffer(value as ArrayBuffer);\n\t\t\tcase '[object WeakMap]':\n\t\t\t\treturn this.parseValueObjectWeakMap();\n\t\t\tcase '[object WeakSet]':\n\t\t\t\treturn this.parseValueObjectWeakSet();\n\t\t\tcase '[object Promise]':\n\t\t\t\treturn this.handleUnsupported(value, 'object');\n\t\t\tdefault:\n\t\t\t\treturn this.parseValueObjectFallback(value, tag);\n\t\t}\n\t}\n\n\tprivate parseString(value: string) {\n\t\tthis.write8(BinaryTokens.String);\n\t\tthis.writeValueString(value);\n\t}\n\n\tprivate parseUndefined() {\n\t\tthis.write8(BinaryTokens.Undefined);\n\t}\n\n\tprivate parseValueNull() {\n\t\tthis.write8(BinaryTokens.Null);\n\t}\n\n\tprivate parseValueObjectString(value: String) {\n\t\tthis.write8(BinaryTokens.StringObject);\n\t\tthis.writeValueString(value.valueOf());\n\t}\n\n\tprivate parseValueObjectBoolean(value: Boolean) {\n\t\tthis.write8(BinaryTokens.BooleanObject);\n\t\tthis.write8(value.valueOf() ? 1 : 0);\n\t}\n\n\tprivate parseValueObjectNumber(value: Number) {\n\t\tthis.write8(BinaryTokens.NumberObject);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectDate(value: Date) {\n\t\tthis.write8(BinaryTokens.Date);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectRegExp(value: RegExp) {\n\t\tthis.write8(BinaryTokens.RegExp);\n\t\tthis.writeValueString(value.source);\n\t\tthis.write8(RegExps.flagsAsInteger(value));\n\t}\n\n\tprivate parseValueObjectLiteral(value: Record<any, any>) {\n\t\tconst keys = Object.keys(value);\n\t\tif (keys.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyObject);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Object);\n\t\tfor (const entryKey of keys) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(value[entryKey]);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectMap(value: Map<unknown, unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyMap);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Map);\n\t\tfor (const [entryKey, entryValue] of value.entries()) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectSet(value: Set<unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptySet);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Set);\n\t\tfor (const entryValue of value) {\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectArrayBuffer(value: ArrayBuffer) {\n\t\tthis.write8(BinaryTokens.ArrayBuffer);\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tthis.write32(uint8Array.length);\n\t\tthis.write(uint8Array);\n\t}\n\n\tprivate parseValueObjectWeakMap() {\n\t\tthis.write8(BinaryTokens.WeakMap);\n\t}\n\n\tprivate parseValueObjectWeakSet() {\n\t\tthis.write8(BinaryTokens.WeakSet);\n\t}\n\n\tprivate parseValueObjectFallback(value: object, tag: string) {\n\t\tconst typedArrayTag = TypedArrays.typedArrayTags.get(tag);\n\t\tif (typedArrayTag) this.writeValueTypedArray(value as TypedArray, typedArrayTag);\n\t\telse this.parseValueObjectLiteral(value);\n\t}\n\n\tprivate parseValueReference(value: number) {\n\t\tthis.write8(BinaryTokens.ObjectReference);\n\t\tthis.write32(value);\n\t}\n\n\tprivate parseValueArray(value: Array<unknown>) {\n\t\tif (value.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyArray);\n\t\t}\n\n\t\tthis.ensureAlloc(2);\n\t\tthis.write8(BinaryTokens.Array);\n\n\t\tfor (let i = 0, n = value.length; i < n; i++) {\n\t\t\tif (i in value) {\n\t\t\t\tthis.parse(value[i]);\n\t\t\t} else {\n\t\t\t\tthis.write8(BinaryTokens.Hole);\n\t\t\t}\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate writeValueTypedArray(value: TypedArray, tag: BinaryTokens) {\n\t\tthis.write8(tag);\n\t\tthis.write32(value.byteLength);\n\n\t\tif (tag !== BinaryTokens.Uint8Array) {\n\t\t\tvalue = new Uint8Array(value.buffer);\n\t\t}\n\n\t\tthis.write(value as Uint8Array);\n\t}\n\n\tprivate write(value: Uint8Array) {\n\t\tthis.ensureAlloc(value.byteLength);\n\t\tthis._buffer!.set(value, this._offset);\n\t\tthis._offset += value.byteLength;\n\t}\n\n\tprivate write8(value: number) {\n\t\tthis.ensureAlloc(1);\n\t\tthis._buffer![this._offset++] = value;\n\t}\n\n\tprivate write32(value: number) {\n\t\tthis.ensureAlloc(4);\n\t\tthis.write32At(value, this._offset);\n\t\tthis._offset += 4;\n\t}\n\n\tprivate write32At(value: number, offset: number) {\n\t\tthis._buffer![offset + 3] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 2] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 1] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset] = value;\n\t}\n\n\tprivate writeF64(value: number) {\n\t\tfloat64Array[0] = value;\n\t\tthis.write(uInt8Float64Array);\n\t}\n\n\tprivate writeValueString(value: string) {\n\t\tconst serialized = Serializer._textEncoder.encode(value);\n\n\t\t// Strings must not contain a null pointer, since they are null-delimited.\n\t\tif (serialized.includes(BinaryTokens.NullPointer)) {\n\t\t\tthrow new SerializerError('Unexpected null pointer in serialized string.', SerializerReason.UnexpectedNullValue);\n\t\t}\n\n\t\tthis.write(serialized);\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate getNumberType(value: number) {\n\t\tconst sign = value < 0;\n\t\tif (value % 1 === 0) {\n\t\t\t// Byte (S | U)\n\t\t\tif (value >= MIN_INT8 && value <= MAX_INT8) return sign ? BinaryTokens.SignedByte : BinaryTokens.UnsignedByte;\n\t\t\t// Int32 (S | U)\n\t\t\tif (value >= MIN_INT32 && value <= MAX_INT32) return sign ? BinaryTokens.SignedInt32 : BinaryTokens.UnsignedInt32;\n\t\t\t// Fallback to float\n\t\t}\n\t\t// Float64\n\t\treturn sign ? BinaryTokens.SignedFloat64 : BinaryTokens.UnsignedFloat64;\n\t}\n\n\tprivate ensureAlloc(amount: number) {\n\t\tthis.expandBuffer(this._offset + amount);\n\t}\n\n\tprivate expandBuffer(length: number) {\n\t\tif (this._buffer!.length < length) {\n\t\t\tconst old = this._buffer;\n\t\t\tthis._buffer = new Uint8Array(Numbers.nextPowerOfTwo(length));\n\t\t\tthis._buffer.set(old!);\n\t\t}\n\t}\n\n\tprivate static _textEncoder = new TextEncoder();\n}\n","import { Deserializer } from './lib/Deserializer';\nimport { OnUnsupported, Serializer } from './lib/Serializer';\n\nexport function serialize(data: any, onUnsupported?: OnUnsupported) {\n\treturn new Serializer(data, onUnsupported).process();\n}\n\nexport function deserialize<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tdeserializer.clean();\n\treturn value;\n}\n\nexport function deserializeWithMetadata<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tconst bufferOffset = deserializer.offset;\n\tdeserializer.clean();\n\n\treturn {\n\t\tvalue,\n\t\toffset: bufferOffset === buffer.byteLength ? -1 : bufferOffset\n\t};\n}\n"],"names":["DeserializerError","Error","[object Object]","message","kind","super","Object","this","DeserializerReason","BinaryTokens","BinaryPrimitives","RegExps","BigIntegers","Numbers","TypedArrays","regExp","global","ignoreCase","multiline","sticky","unicode","dotAll","integer","ret","BigInt","SUPPORTED","n","Math","pow","ceil","log2","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","DataView","BigInt64Array","constructors","push","BigUint64Array","Map","map","typedArray","prototype","toString","call","ArrayBuffer","name","float64Array","uInt8Float64Array","buffer","Deserializer","_buffer","finished","offset","length","_objectIDs","clear","type","read8","Null","PBigInt","readValueBigInt","NBigInt","Boolean","String","readString","Undefined","UnsignedByte","SignedByte","UnsignedInt32","read32","SignedInt32","UnsignedFloat64","readF64","SignedFloat64","Array","readValueArray","EmptyArray","createObjectID","ObjectReference","get","Date","BooleanObject","NumberObject","Number","StringObject","EmptyObject","readValueObject","RegExp","flagsFromInteger","readValueMap","EmptyMap","Set","readValueSet","EmptySet","readValueArrayBuffer","WeakMap","WeakSet","readValueTypedArray","UnknownType","token","byteLength","value","ensureBytes","subarray","typedArrayTagToConstructor","set","uint8Array","i","max","readNullTerminator","add","read","entryKey","entryValue","Hole","offsetBack","end","indexOf","NullPointer","UnexpectedEndOfBuffer","sub","str","_textDecoder","decode","sign","ZERO","b","ONE","digit","EIGHT","watch8","size","amount","TextDecoder","SerializerError","SerializerReason","Serializer","data","onUnsupported","_data","parse","temp","_offset","hint","parseBigInt","parseBoolean","parseNumber","parseObject","parseString","parseUndefined","handleUnsupported","_handlingUnsupported","UnsupportedSerializedType","UnsupportedType","ensureAlloc","write8","headerOffset","unsignedBigInt","byteCount","BYTE","write32At","getNumberType","write32","writeF64","parseValueNull","id","parseValueReference","isArray","parseValueArray","tag","parseValueObjectString","parseValueObjectBoolean","parseValueObjectNumber","parseValueObjectDate","parseValueObjectRegExp","parseValueObjectLiteral","parseValueObjectMap","parseValueObjectSet","parseValueObjectArrayBuffer","parseValueObjectWeakMap","parseValueObjectWeakSet","parseValueObjectFallback","writeValueString","valueOf","source","flagsAsInteger","keys","entries","write","typedArrayTag","typedArrayTags","writeValueTypedArray","serialized","_textEncoder","encode","includes","UnexpectedNullValue","expandBuffer","old","nextPowerOfTwo","TextEncoder","deserializer","clean","bufferOffset","process"],"mappings":"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"}